generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../database//kysely/"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model emailVerificationCode {
  id        String   @id
  code      String
  userId    String
  email     String
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  SELLER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  sessions      Session[]
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  PasswordResetToken    PasswordResetToken[]
  CodeRepo              CodeRepo[]
  emailVerificationCode emailVerificationCode[]
  orders                Order[]

  bannedUntil DateTime?

  role Role @default(USER)

  sellerProfile SellerProfile?
  profile       Profile?

  Review         Review[]
  Comment        Comment[]
  SearchHistory  SearchHistory[]
  SalesAggregate SalesAggregate[]
  Vote           Vote[]
  repoAccesses   UserRepoAccess[]
}

model Profile {
  id          String  @id @default(cuid())
  profileImg  String?
  name        String?
  phoneNumber String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
}

model SellerProfile {
  id                 String                   @id @default(cuid())
  user               User                     @relation(fields: [userId], references: [id])
  userId             String                   @unique
  profileImg         String?
  businessName       String
  businessAddress    String
  businessPhone      String
  businessEmail      String
  identityDoc        String?
  verificationDate   DateTime?
  verificationStatus SellerVerificationStatus @default(PENDING)
  bankAccount        BankAccount?
  Payout             Payout[]
  balance            Float                    @default(0)
  PayoutRequest      PayoutRequest[]
  lastPayoutDate     DateTime?
}

enum SellerVerificationStatus {
  IDLE
  PENDING
  APPROVED
  REJECTED
}

model BankAccount {
  id                String        @id @default(cuid())
  sellerProfile     SellerProfile @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId   String        @unique
  accountHolderName String
  accountNumber     String
  bankName          String
  swiftCode         String
  iban              String?
  routingNumber     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model PayoutRequest {
  id              String              @id @default(cuid())
  sellerProfile   SellerProfile       @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String
  totalAmount     Float
  status          PayoutRequestStatus @default(PENDING)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  processedAt     DateTime?
  payout          Payout?
  lastPayoutDate  DateTime?
  orders          Order[]
}

enum PayoutRequestStatus {
  PENDING
  REJECTED
  PROCESSED
}

model Payout {
  id              String        @id @default(cuid())
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String
  payoutRequest   PayoutRequest @relation(fields: [payoutRequestId], references: [id])
  payoutRequestId String        @unique
  totalAmount     Float
  currency        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model CodeRepo {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  sourceJs    String         @db.Text
  sourceCss   String         @db.Text
  reviews     Review[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  visibility  Visibility     @default(public)
  status      CodeRepoStatus @default(pending)
  name        String
  description String?
  language    Language
  price       Float          @default(0.0)
  tags        TagsOnRepos[]
  codeChecks  CodeCheck[]
  orders      Order[]
  userAccesses UserRepoAccess[]
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  repos     TagsOnRepos[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

model TagsOnRepos {
  codeRepo   CodeRepo @relation(fields: [codeRepoId], references: [id])
  codeRepoId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String

  @@id([codeRepoId, tagId])
}

enum CodeRepoStatus {
  pending
  active
  rejected
  bannedUser
}

enum Visibility {
  public
  private
}

enum Language {
  JSX
  TSX
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tag       String
  createdAt DateTime @default(now())
}

model CodeCheck {
  id                        String   @id @default(cuid())
  repoId                    String
  securityScore             Int
  maintainabilityScore      Int
  readabilityScore          Int
  securitySuggestion        String   @db.Text
  maintainabilitySuggestion String   @db.Text
  readabilitySuggestion     String   @db.Text
  overallDescription        String   @db.Text
  eslintErrorCount          Int
  eslintFatalErrorCount     Int
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  Repo                      CodeRepo @relation(fields: [repoId], references: [id])
}

model Order {
  id                    String         @id @default(cuid())
  userId                String
  user                  User           @relation(fields: [userId], references: [id])
  codeRepoId            String
  codeRepo              CodeRepo       @relation(fields: [codeRepoId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  deletedAt             DateTime?
  status                OrderStatus    @default(REQUIRESPAYMENTMETHOD)
  totalAmount           Float
  stripePaymentIntentId String?
  stripePaymentMethodId String?
  payoutRequest         PayoutRequest? @relation(fields: [payoutRequestId], references: [id])
  payoutRequestId       String?
  userRepoAccesses      UserRepoAccess[]
}

enum OrderStatus {
  REQUIRESPAYMENTMETHOD
  REQUIRESCONFIRMATION
  REQUIRESACTION
  PROCESSING
  REQUIRESCAPTURE
  CANCELLED
  SUCCEEDED
}

model SalesAggregate {
  id         String   @id @default(cuid())
  sellerId   String
  seller     User     @relation(fields: [sellerId], references: [id])
  date       DateTime
  revenue    Float
  salesCount Int

  @@unique([sellerId, date])
}

enum UserCommentFlag {
  NONE
  SPAM
  INAPPROPRIATE_LANGUAGE
  HARASSMENT
  OFF_TOPIC
  FALSE_INFORMATION
  OTHER
}

model Review {
  id        String          @id @default(cuid())
  content   String
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  repoId    String
  repo      CodeRepo        @relation(fields: [repoId], references: [id])
  rating    Int             @default(0)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
  comments  Comment[]
  flag      UserCommentFlag @default(NONE)

  upvotes   Int             @default(0)
  downvotes Int             @default(0)
  votes     Vote[]
}

model Comment {
  id        String          @id @default(cuid())
  content   String
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review          @relation(fields: [reviewId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
  flag      UserCommentFlag @default(NONE)

  upvotes   Int             @default(0)
  downvotes Int             @default(0)
  votes     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  Review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  String?

  @@unique([userId, commentId])
  @@unique([userId, reviewId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model SupportTicket {
  id        String              @id @default(cuid())
  email     String
  title     String
  content   String
  status    SupportTicketStatus @default(todo)
  type      SupportTicketType   @default(general)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum SupportTicketStatus {
  inProgress
  todo
  backlog
  done
}

enum SupportTicketType {
  general
  technical
  payment
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRepoAccess {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  repo      CodeRepo @relation(fields: [repoId], references: [id])
  repoId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  grantedAt DateTime @default(now())
  expiresAt DateTime?

  @@unique([userId, repoId])
}
