// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator kysely {
  provider = "prisma-kysely"

  output       = "../database//kysely/"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = env("DATABASE_LOCAL_URL")
}

model emailVerificationCode {
  id        String   @id
  code      String
  userId    String
  email     String
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  SELLER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  sessions      Session[]
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  PasswordResetToken    PasswordResetToken[]
  CodeRepo              CodeRepo[]
  emailVerificationCode emailVerificationCode[]
  orders                Order[]

  bannedUntil           DateTime?

  role                  Role                    @default(USER)
  isSellerVerified      Boolean                 @default(false)
  sellerProfile         SellerProfile?
  profile               Profile?
  Review                Review[]
  Comment               Comment[]
  SearchHistory         SearchHistory[]
}

model Profile {
  id          String  @id @default(cuid())
  profileImg  String?
  name        String?
  phoneNumber String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
}

model SellerProfile {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  profileImg       String?
  businessName     String
  businessAddress  String
  businessPhone    String
  businessEmail    String
  identityDoc      String? // file path
  verificationDate DateTime?
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model CodeRepo {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  sourceJs  String @db.Text
  sourceCss String @db.Text

  reviews    Review[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  visibility Visibility     @default(public)
  status     CodeRepoStatus @default(pending)

  name        String
  description String?
  language    Language
  price       Float       @default(0.0)
  tags        Tag[]
  codeChecks  CodeCheck[]

  orders          Order[]
  stripeProductId String?
  stripePriceId   String?
}

enum CodeRepoStatus {
  pending
  active
  rejected
  bannedUser
}

enum Visibility {
  public
  private
}

enum Language {
  JSX
  TSX
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  repoId    String
  codeRepo  CodeRepo  @relation(fields: [repoId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tag       String
  createdAt DateTime @default(now())
}

model CodeCheck {
  id          String   @id @default(cuid())
  repoId      String
  score       Int
  message     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Repo        CodeRepo @relation(fields: [repoId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  codeRepoId  String
  codeRepo    CodeRepo    @relation(fields: [codeRepoId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  status      OrderStatus @default(pending)
  totalAmount Float
}

enum OrderStatus {
  pending
  completed
  cancelled
}

model Review {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  repoId    String
  repo      CodeRepo  @relation(fields: [repoId], references: [id])
  rating    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  comments  Comment[] // New relation to the Comment model
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review    @relation(fields: [reviewId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// each repo can have many tags
// support tickets
model SupportTicket {
  id        String              @id @default(cuid())
  // userId    String
  // user      User              @relation(fields: [userId], references: [id])
  email     String
  title     String
  content   String
  status    SupportTicketStatus @default(todo)
  // enmu for type
  type      SupportTicketType   @default(general)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  // User      User?               @relation(fields: [userId], references: [id])
  // userId    String?
}

enum SupportTicketStatus {
  inProgress
  todo
  backlog
  done
}

enum SupportTicketType {
  general
  technical
  payment
}

// images or media files
model Media {
  id        String   @id @default(cuid())
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
